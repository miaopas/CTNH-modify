GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    event.create('mana_reactor')
        .category('ctnh')
        .setMaxIOSize(6, 6, 3, 3)
        .setEUIO('in')
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW_MULTIPLE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CHEMICAL)
})


GTCEuStartupEvents.registry('gtceu:machine', event => {
    event.create('mana_reactor', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType('mana_reactor')
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAAAAAAAAAAAAAAAA", "###BB#######BB###", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "##BAAC#####CAAB##", "#####C#####C#####", "#####CCDDDCC#####", "######C###C######", "#################", "#################", "#################", "#######EEE#######", "#######EEE#######", "#######EEE#######", "#################", "#################", "#################", "#################", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "#BAA#########AAB#", "###BA#######AB###", "#####DD###DD#####", "#######DDD#######", "#################", "######FFFFF######", "#####EEEEEEE#####", "#####EE###EE#####", "#####EE###EE#####", "#####EE###EE#####", "#####EEEEEEE#####", "######EEEEE######", "#################", "#################", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "BAA###########AAB", "##BA#########AB##", "####D#######D####", "#####DDFFFDD#####", "#####FFFFFFF#####", "####FFF####FF####", "####E#######E####", "###EE#######EE###", "###EE#######EE###", "###EE#######EE###", "####E#######E####", "####EE#####EE####", "#####GGGGGGG#####", "#######GGG#######", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "BA#############AB", "##A###########A##", "###D#########D###", "####DFFFFFFFD####", "####F#######F####", "###F#########F###", "###E#########E###", "###E#########E###", "###E#########E###", "###E#########E###", "###E#########E###", "###E#########E###", "####G#######G####", "#####GGGGGGG#####", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "#C#############C#", "#C#############C#", "#CD##FFFFFF###DC#", "###DFF#####FFD###", "###F#########F###", "###F#########F###", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "###E#########E###", "###G#########G###", "####GG#####GG####", "######GGGGG######", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "#################", "#################", "#CD##FFFFFFF##DC#", "#C#DF#######FD#C#", "###F#########F###", "##F###########F##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "###G#########G###", "####G#######G####", "#####GGGGGGG#####", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "#################", "#######FFF#######", "#D###FF###FF###D#", "##DFF#######FFD##", "###F#########F###", "##F###########F##", "##E###########E##", "#E#############E#", "#E#############E#", "#E#############E#", "##E###########E##", "##E###########E##", "###G#########G###", "###GG#######GG###", "#####GG###GG#####", "#######GGG#######") 
            .aisle("AAAAAAAAAAAAAAAAA", "#################", "#######FFF#######", "#D###FF###FF###D#", "##DFF#######FFD##", "###F#########F###", "##F###########F##", "##E###########E##", "#E#############E#", "#E#############E#", "#E#############E#", "##E###########E##", "##E###########E##", "###G#########G###", "###GG#######GG###", "#####GG###GG#####", "#######GGG#######") 
            .aisle("AAAAAAAAAAAAAAAAA", "#################", "#######FFF#######", "#D###FF###FF###D#", "##DFF#######FFD##", "###F#########F###", "##F###########F##", "##E###########E##", "#E#############E#", "#E#############E#", "#E#############E#", "##E###########E##", "##E###########E##", "###G#########G###", "###GG#######GG###", "#####GG###GG#####", "#######GGG#######") 
            .aisle("AAAAAAAAAAAAAAAAA", "#################", "#################", "#CD##FFFFFFF##DC#", "#C#DF#######FD#C#", "###F#########F###", "##F###########F##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "###G#########G###", "####G#######G####", "#####GGGGGGG#####", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "#C#############C#", "#C#############C#", "#CD###FFFFF###DC#", "###DFF#####FFD###", "###F#########F###", "###F#########F###", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "##E###########E##", "###E#########E###", "###G#########G###", "####GG#####GG####", "######GGGGG######", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "BA#############AB", "##A###########A##", "###D#########D###", "####DFFFFFFFD####", "####F#######F####", "###F#########F###", "###E#########E###", "###E#########E###", "###E#########E###", "###E#########E###", "###E#########E###", "###E#########E###", "####G#######G####", "#####GGGGGGG#####", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "BAA###########AAB", "##BA#########AB##", "####D#######D####", "#####DDFFFDD#####", "#####FFFFFFF#####", "####FF#####FF####", "####E#######E####", "###EE#######EE###", "###EE#######EE###", "###EE#######EE###", "####E#######E####", "####EE#####EE####", "#####GGGGGGG#####", "#######GGG#######", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "#BAA#########AAB#", "###BA#######AB###", "#####DD###DD#####", "#######DDD#######", "#################", "######FFFFF######", "#####EEEEEEE#####", "#####EE###EE#####", "#####EE###EE#####", "#####EE###EE#####", "#####EEEEEEE#####", "######EEEEE######", "#################", "#################", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "##BAACDDDDDCAAB##", "#####CDD@DDC#####", "#####CCDDDCC#####", "######C###C######", "#################", "#################", "#################", "#######EEE#######", "#######EEE#######", "#######EEE#######", "#################", "#################", "#################", "#################", "#################", "#################") 
            .aisle("AAAAAAAAAAAAAAAAA", "###BB#######BB###", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################", "#################") 
            .where("A", Predicates.blocks("botania:livingrock_bricks"))
            .where("#", Predicates.any())
            .where("B", Predicates.blocks("botania:livingrock_bricks_slab"))
            .where("C", Predicates.blocks("botania:stripped_livingwood"))
            .where("D", Predicates.blocks("botania:polished_livingrock")
                    .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where("E", Predicates.blocks("botania:mana_glass"))
            .where("F", Predicates.blocks("botania:elf_glass"))
            .where("G", Predicates.blocks("botania:bifrost_perm"))
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .build()
        )
        .workableCasingRenderer('botania:block/polished_livingrock', 'gtceu:block/multiblock/generator/large_steam_turbine', false)
})